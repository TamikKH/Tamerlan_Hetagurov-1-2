```markdown
Отчет по лабораторной работе №3
Организация данных и системный каталог

2025-10-19
4 курс 1 полугодие 
Пиж-б-о-22-1
Администрирование баз данных
Хетагуров Тамерлан Аланович

Цель работы: Изучить принципы многоверсионного управления конкурентным доступом (MVCC) в
 PostgreSQL. Получить практические навыки наблюдения за работой MVCC, анализа версий строк,
 снимков данных и уровней изоляции транзакций. Освоить использование расширений и системных
 представлений для исследования внутренней структуры данных.

Теоретическая часть:
MVCC (Multiversion Concurrency Control) — механизм, позволяющий нескольким транзакциям работать с одними и теми же данными одновременно,
минимизируя блокировки. Каждая транзакция видит согласованный «снимок» данных на момент своего начала.

Версии строк: При изменении строки создается ее новая версия. Старая версия остается в таблице до очистки.

Системные поля:
xmin — идентификатор транзакции, создавшей версию строки.
xmax — идентификатор транзакции, удалившей версию строки (или заблокировавшей ее для обновления).
ctid — физическое расположение версии строки в таблице (номер страницы и позиции в ней).

Уровни изоляции: Определяют, какие аномалии параллелизма допустимы:
Read Committed (По умолчанию): Виден только зафиксированный данные. Возможны неповторяемое чтение и фантомное чтение.
Repeatable Read: Гарантирует, что данные, прочитанные в транзакции, не изменятся. Предотвращает неповторяемое чтение, возможны фантомы.
Serializable: Самый строгий уровень, предотвращает все аномалии.

Снимок данных (Snapshot): Набор идентификаторов транзакций, активных на момент начала текущей транзакции. Определяет, какие версии строк видимы текущей транзакции.

 Модуль 1: Уровни изоляции и аномалии
 1. Read Committed vs Удаление:
Создайте таблицу iso_test (id INT, data TEXT) и вставьте одну строку.
В сеансе 1 начните транзакцию с уровнем READ COMMITTED и выполните SELECT * FROM iso_test;.
В сеансе 2 удалите строку и зафиксируйте изменения (DELETE ...; COMMIT;).
В сеансе 1 выполните тот же SELECT повторно. Сколько строк увидите? Завершите транзакцию в сеансе 1.
 2. Repeatable Read vs Удаление:
 Повторите предыдущий эксперимент, но в сеансе 1 начните транзакцию с BEGIN
 ISOLATION LEVEL REPEATABLE READ;.
 Объясните разницу в результатах между двумя уровнями изоляции.
 3. Создание таблицы в транзакции:
 В сеансе 1 начните транзакцию и создайте новую таблицу new_table, вставьте в нее строку.
 Не фиксируйте.
 В сеансе 2 выполните SELECT * FROM new_table;. Что произойдет?
 Зафиксируйте транзакцию в сеансе 1. Повторите запрос в сеансе 2.
 Повторите процесс, но вместо фиксации откатите транзакцию в сеансе 1. Что изменилось?
 4. Блокировка DDL:
 В сеансе 1 начните транзакцию и выполните SELECT * FROM iso_test; (даже если
 таблица пуста).
 Попытайтесь в сеансе 2 выполнить DROP TABLE iso_test;. Получится ли? Объясните,
 почему.



## Практическая часть

### Модуль [номер]: [Название модуля]

#### Задача [номер]: [Название задачи]
**Цель:** [Цель задачи]

**Выполненные действия:**
```sql
-- SQL-команды, выполненные в задании
SELECT * FROM example_table;
```

**Результаты:**
```bash
# Вывод команд и результаты
 id | data 
----+------
  1 | test
```

**Выводы и объяснения:**
[Ответ на вопрос "объясните", "почему", "сколько" из задания]

#### Задача [номер]: [Название задачи]
[Аналогичная структура для каждой задачи]

### Модуль [номер]: [Название модуля]
[Повторение структуры для каждого модуля]

## Результаты выполнения

### Сводная таблица результатов
| Модуль | Задача | Статус | Ключевые наблюдения |
|--------|--------|--------|---------------------|
| 1 | 1 | ✅ Выполнено | [наблюдение] |
| 1 | 2 | ✅ Выполнено | [наблюдение] |
| 2 | 1 | ✅ Выполнено | [наблюдение] |

### Графики и диаграммы
[При наличии - графики изменения размеров таблиц, WAL и т.д.]

## Анализ и выводы

### Основные наблюдения
1. [Наблюдение 1 с объяснением]
2. [Наблюдение 2 с объяснением]
3. [Наблюдение 3 с объяснением]

### Сравнительный анализ
[Сравнение различных подходов/настроек, например:]
- Сравнение уровней изоляции транзакций
- Эффективность VACUUM vs VACUUM FULL
- Производительность различных методов резервного копирования

### Проблемы и решения
| Проблема | Причина | Решение |
|----------|---------|---------|
| [Описание проблемы] | [Причина] | [Как решили] |

## Ответы на контрольные вопросы

### Вопросы из задания
1. **"[Текст вопроса из задания]"**  
   [Развернутый ответ с обоснованием]

2. **"[Текст вопроса из задания]"**  
   [Развернутый ответ с обоснованием]

### Дополнительные вопросы
1. **"[Вопрос]"**  
   [Ответ]

## Приложения

### Конфигурационные файлы
```bash
# pg_hba.conf (фрагмент)
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             postgres                                peer
```

### SQL-скрипты
[Полные скрипты, слишком объемные для включения в основной текст]

### Логи выполнения
```bash
# Фрагменты логов сервера PostgreSQL
LOG:  autovacuum: processing table "public.vacuum_test"
```

### Системные команды
```bash
# Команды ОС для мониторинга
ps aux | grep postgres
```

---

## Особенности шаблона для лабораторных работ PostgreSQL:

1. **Структура по модулям** - соответствует разбиению в заданиях
2. **Блоки для SQL-кода** - выделение команд и их результатов
3. **Разделы для объяснений** - ответы на вопросы "объясните", "почему"
4. **Таблицы результатов** - для наглядного представления выполнения
5. **Места для конфигураций** - важные настройки PostgreSQL
6. **Блоки для логов** - вывод служебной информации

## Рекомендации (обязательные) по использованию:

1. **Для каждой лабораторной работы** создавайте отдельный файл отчета
2. **Название файла:** `ОТЧЕТ_лаб[номер].md` (например, `ОТЧЕТ_лаб03.md`)
3. **Все SQL-скрипты** сохраняйте в отдельных файлах в папке `scripts/`
4. **Конфигурационные файлы** сохраняйте в папке `config/`
5. **Логи и выводы** сохраняйте в папке `logs/`
